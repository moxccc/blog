<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ReactNative初试</title>
    <link href="/2023/09/15/ReactNative%E5%88%9D%E8%AF%95/"/>
    <url>/2023/09/15/ReactNative%E5%88%9D%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="note note-success">            <p><a href="https://reactnative.dev/">React Native</a> 是一个使用 JavaScript 和 React 开发本地Android和iOS应用的框架，他有以下优点: </p><ul><li><p><strong>简单易开发</strong><br>React Native 使你可以创建真正原生的应用，用户体验绝不拉胯。它提供了一些平台无关的抽象核心组件，像是<code>View</code>, <code>Text</code> 以及 <code>Image</code>等，可直接映射渲染为 对应平台的原生UI组件。</p></li><li><p><strong>无缝跨平台</strong><br>通过 React 的声明式组件机制和 JavaScript 代码，现有的原生代码和api可以完美地封装嵌合到 React 组件中。这样既为更多新的开发团队赋予原生应用的开发能力，也能极大地提升现有原生团队的开发效率。</p></li><li><p><strong>秒速刷新</strong><br>保存即刷新  借助 JavaScript 的动态特性， React Native 能够让你光速迭代。</p></li></ul>          </div><h2 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h2><p>React Native有三个开发平台 macOS、Windows Liunx</p><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><h4 id="首先你需要在你的电脑上先安装-Node、JDK和Android-Studio这些项目依赖后才能进行React-Native项目的创建"><a href="#首先你需要在你的电脑上先安装-Node、JDK和Android-Studio这些项目依赖后才能进行React-Native项目的创建" class="headerlink" title="首先你需要在你的电脑上先安装 Node、JDK和Android Studio这些项目依赖后才能进行React Native项目的创建"></a>首先你需要在你的电脑上先安装 <a href="https://nodejs.org/en">Node</a>、<a href="https://www.oracle.com/java/technologies/downloads/#java11">JDK</a>和<a href="https://developer.android.com/studio">Android Studio</a>这些项目依赖后才能进行React Native项目的创建</h4><div class="note note-warning">            <p>注意事项：</p><ul><li>Node 的版本应大于等于 16，安装完 Node 后建议设置 npm 镜像（淘宝源）以加速后面的过程</li><li>不要使用 cnpm！cnpm 安装的模块路径比较奇怪，packager 不能正常识别！</li><li>React Native 需要 <code>Java Development Kit [JDK] 11</code>,你可以在命令行中输入 <code>javac -version</code>来查看你当前安装的 JDK 版本。如果版本不合要求，则可以去<a href="https://adoptium.net/zh-CN/temurin/releases/?variant=openjdk11&jvmVariant=hotspot">Temurin</a>或<a href="https://www.oracle.com/java/technologies/downloads/#java11">Oracle JDK</a>上下载</li></ul>          </div><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>React Native 需要通过环境变量来了解你的 Android SDK 装在什么路径，从而正常进行编译。</p><ul><li>右键<code>我的电脑</code>&gt;<code>属性</code>&gt;<code>高级系统设置</code>&gt;<code>高级</code>&gt;<code>环境变量</code>&gt;<code>新建</code>,创建一个名为ANDROID_HOME的环境变量（系统或用户变量均可），指向你的 Android SDK 所在的目录（具体的路径可能和下图不一致，请自行确认）：</li></ul><p><img src="/../img/blogimg/9-15/01.png"></p><ul><li>使用Android Studio 时需要安装模拟器，但是坑人的是他的模拟器只能安装在<code>C盘</code>里面，安装完成后大概能占个5G的存储空间,如果你不想当<code>C盘战士</code>的话就得将他移到别的空闲的磁盘中,这时我们可以定义一个系统变量来让改变它的默认路径指向</li></ul><p><img src="/../img/blogimg/9-15/02.png"></p><blockquote><p>我这里是将它的默认路径改在了<code>D:\android_AVD</code>文件夹中,你如果想装在其他的盘中，把变量值改成你文件夹的对应路径即可</p></blockquote><h4 id="创建新项目"><a href="#创建新项目" class="headerlink" title="创建新项目"></a>创建新项目</h4><ol><li>准备工作做完后可以开始创建React Native项目了在你项目文件夹中打开命令提示框 输入<br><code>npx react-native@latest init 项目名称</code><div class="note note-warning">            <p>注意事项：</p><ul><li><p>如果你之前全局安装过旧的<code>react-native-cli</code>命令行工具，请使用<code>npm uninstall -g react-native-cli</code>卸载掉它以避免一些冲突：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">npm uninstall -g react-<span class="hljs-keyword">native</span>-cli <span class="hljs-meta">@react</span>-<span class="hljs-keyword">native</span>-community/cli<br></code></pre></td></tr></table></figure></li><li><p>文件名中不能使用<code>中文</code>、<code>空格</code>等特殊符号。也不能使用常见的关键字作为项目名（如 <code>class</code>, <code>native</code>, <code>new</code>, <code>package</code> 等等）。也不能使用与核心模块同名的项目名（如 <code>react</code>, <code>react-native</code> 等）。</p></li></ul>          </div></li></ol><p>2.安装成功后的界面应该是这样的</p><p><img src="/../img/blogimg/9-15/03.png"></p><p>3.接下来就可以启动项目了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs BASH"><span class="hljs-comment"># 进入你的项目</span><br><span class="hljs-built_in">cd</span> AwesomeProject<br><br><span class="hljs-comment"># 运行</span><br>npx react-native run-android<br><br><span class="hljs-comment"># 运行完后会打开一个新的命令提示框并显示4个选项</span><br><br>r - reload the app<br>d - open developer menu<br>i - run on iOS<br>a - run on Android <br><br>Android 输入 a 即可<br><br></code></pre></td></tr></table></figure><p><img src="/../img/blogimg/9-15/04.png"><br><img src="/../img/blogimg/9-15/05.png"><br><img src="/../img/blogimg/9-15/06.png"></p><div class="note note-warning">            <p>若启动不成功可能是端口被占用，只需要修改端口号即可</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">npx react-native <span class="hljs-built_in">run</span>-android <span class="hljs-comment">--port=1234</span><br></code></pre></td></tr></table></figure>          </div><h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><p>待填充</p>]]></content>
    
    
    <categories>
      
      <category>ReactNative</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux下使用Let&#39;s Encrypt配置Nginx SSL证书</title>
    <link href="/2023/08/10/Linux%E4%B8%8B%E4%BD%BF%E7%94%A8Let&#39;s%20Encrypt%E9%85%8D%E7%BD%AENginx%20SSL%E8%AF%81%E4%B9%A6/"/>
    <url>/2023/08/10/Linux%E4%B8%8B%E4%BD%BF%E7%94%A8Let&#39;s%20Encrypt%E9%85%8D%E7%BD%AENginx%20SSL%E8%AF%81%E4%B9%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="note note-success">            <p>白嫖的ssl证书谁能不爱呢，还可以设置自动续期，基本上算是永久的，话不多说，看我表演。</p>          </div><h2 id="使用acme-sh"><a href="#使用acme-sh" class="headerlink" title="使用acme.sh"></a>使用acme.sh</h2><p><a href="https://github.com/acmesh-official/acme.sh">acme.sh文档地址</a></p><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">curl https</span>://get.acme.sh | sh -s email=my@moxccc.com<br></code></pre></td></tr></table></figure><h3 id="安装完成进入acme-sh目录"><a href="#安装完成进入acme-sh目录" class="headerlink" title="安装完成进入acme.sh目录"></a>安装完成进入<code>acme.sh</code>目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ./.acme.sh<br></code></pre></td></tr></table></figure><h3 id="自动配置dns"><a href="#自动配置dns" class="headerlink" title="自动配置dns"></a>自动配置dns</h3><p>由于我这里使用的是阿里云 来配置域名解析修改，其他的域名提供商请查看此处<a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi#11-use-aliyun-domain-api-to-automatically-issue-cert">dnsapi</a></p><ul><li><p>首先去阿里云网站申请<code>AccessKey</code>( 请注意保管! )</p></li><li><p>然后修改acme的配置项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH"><span class="hljs-built_in">cd</span> /root/.acme.sh<br></code></pre></td></tr></table></figure></li><li><p>修改account.conf</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">Ali_Key</span>=<span class="hljs-string">&quot;***&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">Ali_Secret</span>=<span class="hljs-string">&quot;***&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="颁发证书"><a href="#颁发证书" class="headerlink" title="颁发证书"></a>颁发证书</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs LINUX">acme.sh  --issue -d moxccc.com  -d &#x27;*.moxccc.com&#x27;  --dns dns_ali<br></code></pre></td></tr></table></figure><blockquote><p>若想颁发多个域名 则按照 <code>-d 域名.com</code>  <code>-d &#39;*.域名.com&#39;</code> 在 –dns 前添加即可</p></blockquote><h2 id="查看证书信息"><a href="#查看证书信息" class="headerlink" title="查看证书信息"></a>查看证书信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs LINUX">acme.sh --info -d dreamogi.com<br></code></pre></td></tr></table></figure><h2 id="自动续期"><a href="#自动续期" class="headerlink" title="自动续期"></a>自动续期</h2><p>由于证书的有效期为3个月,所以需要进行自动续期，具体内容参见<a href="https://github.com/acmesh-official/acme.sh#12-how-to-renew-the-certs">How to renew the certs</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs LINUX">acme.sh --renew -d dreamogi.com --force<br></code></pre></td></tr></table></figure><h2 id="生成证书后重载Nginx"><a href="#生成证书后重载Nginx" class="headerlink" title="生成证书后重载Nginx"></a>生成证书后重载Nginx</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs LINUX">acme.sh --install-cert -d dreamogi.com \<br>--key-file       /path/to/keyfile/in/nginx/key.pem  \<br>--fullchain-file /path/to/fullchain/nginx/cert.pem \<br>--reloadcmd     &quot;service nginx force-reload&quot;<br></code></pre></td></tr></table></figure><h2 id="Nginx-配置SSH"><a href="#Nginx-配置SSH" class="headerlink" title="Nginx 配置SSH"></a>Nginx 配置SSH</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 证书配置</span><br><span class="hljs-attribute">ssl_certificate</span>      /root/.acme.sh/moxccc.com_ecc/fullchain.cer;<br><span class="hljs-attribute">ssl_certificate_key</span>  /root/.acme.sh/moxccc.com_ecc/moxccc.com.key;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSL</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux备忘录</title>
    <link href="/2023/08/07/Linux%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <url>/2023/08/07/Linux%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="note note-info">            <p>linux命令长时间不写就会忘记，所以写篇博客记录一下！</p>          </div><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>使用 <a href="https://github.com/PowerShell/Win32-OpenSSH">Win32-OpenSSH</a> 运行服务器，首先打开cmd，输入</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> root@<span class="hljs-number">127.0.0.1</span><br></code></pre></td></tr></table></figure><p>其中root为账户名，127.0.0.1为ip地址，当然您也可以使用在.ssh中设置的别名</p><p>.ssh文件夹位于 %USERPROFILE% 目录下 <code>C:\Users\Administrator.DESKTOP-1A2DGNK.ssh</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Host</span> moc<br><span class="hljs-attribute">HostName</span> <span class="hljs-number">127.0.0.1</span><br><span class="hljs-attribute">User</span> root<br><span class="hljs-attribute">ServerAliveInterval</span> <span class="hljs-number">60</span><br><span class="hljs-attribute">IdentityFile</span> C:\Users\Administrator.DESKTOP-<span class="hljs-number">1</span>A2DGNK\.ssh\moc<br></code></pre></td></tr></table></figure><ul><li>moc 别名</li><li>User 账户</li><li>ServerAliveInterval 心跳间隔</li><li>IdentityFile 密钥文件</li></ul><p>经过上述配置后，您可以使用以下的命令来进行链接</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh moc</span><br></code></pre></td></tr></table></figure><blockquote><p>如果要尝试使用以上命令，则必须在环境变量中配置ssh否则无法直接使用！</p></blockquote><h2 id="SSH安全性"><a href="#SSH安全性" class="headerlink" title="SSH安全性"></a>SSH安全性</h2><div class="note note-danger">            <p>如果仅设置了密码登录，存在被爆破的风险，而且root用户无法远程登录</p>          </div><p>这里采用Win32-OpenSSH为例，介绍如何使用密钥登录的方式来防范风险</p><ul><li>首先打开<code>Win32-OpenSSH</code>的文件 , 点击<code>ssh-keygen.exe</code>运行</li></ul><p>一共需要输入3次，分别为</p><ul><li>密钥的文件名</li><li>密钥的密码</li><li>密码确认密码</li></ul><blockquote><p>若不想输入密码 2、3次直接按回车即可</p></blockquote><p>输入完成后会在根目录下生成文件</p><ul><li>文件名</li><li>文件名.pub</li></ul><p>其中后缀名为.pub需要放入在服务器上，打开ssh远程链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#进入.ssh目录</span><br><span class="hljs-built_in">cd</span> .ssh<br><br><span class="hljs-comment">#创建authorized_keys文件，如果存在则直接编辑即可</span><br><span class="hljs-built_in">touch</span> authorized_keys &gt;&gt; 您的pub文件内的内容<br></code></pre></td></tr></table></figure><p>pub文件的内容是这种形式 ssh-rsa xxxxxx</p><p><strong>没有后缀名的文件为登录私钥，一定要妥善保存，否则后续可能会无法链接到服务器！！！！</strong></p><ul><li>然后打开ssh配置项</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs BASH"><span class="hljs-built_in">cd</span> /etc/ssh<br>vi sshd_config<br></code></pre></td></tr></table></figure><p>修改以下配置</p><ul><li><p><strong>允许密钥登录</strong><br>PubkeyAuthentication yes</p></li><li><p><strong>允许root登录（此项可能存在风险）</strong><br>PermitRootLogin yes</p></li><li><p><strong>存放pub密钥的文件路径</strong><br>AuthorizedKeysFile .ssh&#x2F;authorized_keys .ssh&#x2F;authorized_keys2</p></li><li><p><strong>关闭密码登录（即仅允许密钥方式的登录）</strong><br>PasswordAuthentication no</p></li></ul><p>以上配置保存完毕后，输入 systemctl restart sshd.service 重启ssh服务，即可完成上述配置！</p><h2 id="包管理器"><a href="#包管理器" class="headerlink" title="包管理器"></a>包管理器</h2><p>linux中的包管理器真的是非常的好用，仅需要几个字母便可以直接安装&#x2F;卸载&#x2F;更新软件</p><div class="note note-success">            <p><span style="color:green;"> # 安装 </span><br>apt install xxx</p><p><span style="color:green;"> # 重新安装</span><br>apt reinstall xxx</p><p><span style="color:green;"> # 移除</span><br>apt remove xxx</p><p><span style="color:green;"> # 包源更新</span><br>apt update</p><p><span style="color:green;"> # 更新</span><br>apt upgrade</p>          </div><p>由于国内特殊的网络原因，导致访问这些软件时下载更新很慢，鉴于此可以参考使用<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">清华大学镜像源</a>来解决此问题</p><p>使用vi编辑&#x2F;etc&#x2F;apt&#x2F;sources.list,修改如下</p><div class="note note-success">            <p><span style="color:green;"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><strong>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> jammy main restricted universe multiverse</strong></p><p># deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> jammy main restricted universe multiverse<br><strong>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> jammy-updates main restricted universe multiverse</strong></p><p># deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> jammy-updates main restricted universe multiverse<br><strong>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> jammy-backports main restricted universe multiverse</strong></p><p># deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> jammy-backports main restricted universe multiverse</p><p># deb <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> jammy-security main restricted universe multiverse<br># # deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> jammy-security main restricted universe multiverse</p><p><strong>deb <a href="http://security.ubuntu.com/ubuntu/">http://security.ubuntu.com/ubuntu/</a> jammy-security main restricted universe multiverse</strong><br># # deb-src <a href="http://security.ubuntu.com/ubuntu/">http://security.ubuntu.com/ubuntu/</a> jammy-security main restricted universe multiverse</p><p># 预发布软件源，不建议启用<br># deb <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> jammy-proposed main restricted universe multiverse<br># # deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> jammy-proposed main restricted universe multiverse</p>          </div><p>使用包管理器安装的部分软件可能版本过老，如果遇到此情况的话请参考下列官方文档教程处理（其他软件大同小异不做过多赘述）</p><ul><li><a href="https://nginx.org/en/linux_packages.html#Ubuntu">Nginx</a></li><li><a href="https://redis.io/docs/getting-started/installation/install-redis-on-linux/">Redis</a></li></ul><h2 id="系统代理"><a href="#系统代理" class="headerlink" title="系统代理"></a>系统代理</h2><p>打开&#x2F;etc&#x2F;environment文件</p><p>在文件中增加如下内容，然后:wq保存后reboot机器即可正常使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs BASH">http_proxy=<span class="hljs-string">&quot;http://ip:port/&quot;</span><br>https_proxy=<span class="hljs-string">&quot;http://ip:port/&quot;</span><br>no_proxy=<span class="hljs-string">&quot;localhost, 127.0.0.1&quot;</span><br></code></pre></td></tr></table></figure><h2 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h2><p>打开 <code>/etc/systemd/system/</code> 文件夹</p><p>新建一个文件，文件名称以<code>xxx.service</code>格式</p><p>然后键入如下的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs BASH">[Unit]<br>Description=subconverter<br><br>[Service]<br>WorkingDirectory=/root/subconverter<br>ExecStart=/root/subconverter/subconverter<br>Restart=always<br>RestartSec=3 <br>SyslogIdentifier=dotnet-example<br>User=root<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><ul><li>Description 说明</li><li>WorkingDirectory 工作目录</li><li>ExecStart 执行命令</li><li>RestartSec 启动次数</li><li>User 运行的角色</li></ul><p>编辑完成后输入如下的命令</p><ul><li>systemctl daemon-reload 重载</li><li>systemctl enable xxx.service 启用服务</li><li>systemctl restart xxx.service 启动服务</li><li>systemctl status xxx.service 获取服务状态</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://blog.dreamogi.com/posts/linux-memo/">Linux备忘录</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>初试nginx</title>
    <link href="/2023/04/24/%E5%88%9D%E8%AF%95nginx/"/>
    <url>/2023/04/24/%E5%88%9D%E8%AF%95nginx/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="note note-success">            <p>作为一年的前端程序员，到现在都没有一台自己的服务器，感觉有点拉跨，所以最近忍痛割爱，耗费巨资买了一台阿里云的一年服务器,虽然买了，但是不知道能用服务器干嘛，我想这不能让他闲着的原则，我就搞起了Linux和nginx在上面测试</p><p>Linux不用我多说，程序员必备技能， nginx呢是目前最火的服务器不用我多说，所以在这些因素下我就开始了痛苦的学习之旅</p>          </div><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h3><div class="note note-success">            <blockquote><p>我购买的阿里云服务器配置： 2核(vCPU)2 GiB  Ubuntu 22.04 64位</p></blockquote><ul><li><p>安装使用工具 ：<br>Xshell 7 +  Xftp 7     <span class="label label-info"><a href="https://www.netsarang.com/en/xshell/">Xshell官网</a></span></p></li><li><p>连接你的账户 ：<br>在xshell下载安装完成后，打开xshell 登录你的账号，用户名一般默认root 密码则是你在阿里云服务器控制台重置的密码</p></li></ul>          </div><h3 id="2-开始使用"><a href="#2-开始使用" class="headerlink" title="2.开始使用"></a>2.开始使用</h3><div class="note note-info">            <ul><li><p><strong>检查是否有更新</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">apt update<br></code></pre></td></tr></table></figure></li><li><p><strong>更新安装包</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">apt upgrade<br></code></pre></td></tr></table></figure></li><li><p><strong>安装nginx</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">apt install nginx<br></code></pre></td></tr></table></figure></li><li><p><strong>nginx常用命令</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nginx</span> -s stop        //立即停止服务<br><br>nginx -s quit        //优雅退出(等待进程全部结束)<br><br>nginx -s reload      //热重载<br><br>ps aux | grep nginx  //查看nginx进程<br><br></code></pre></td></tr></table></figure></li><li><p><strong>nginx常用目录</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx">/etc/nginx/nginx.<span class="hljs-attribute">conf</span>      //配置文件目录<br><br>/usr/share/nginx/html      //网页文件目录<br><br></code></pre></td></tr></table></figure></li></ul>          </div><h3 id="3-应用最新的安装包"><a href="#3-应用最新的安装包" class="headerlink" title="3.应用最新的安装包"></a>3.应用最新的安装包</h3><div class="note note-info">            <ul><li><strong>nginx配置key</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">wget https://nginx.org/keys/nginx_signing.key<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">sudo apt-key add nginx_signing.key<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">sudo sh -c &quot;echo &#x27;deb http://nginx.org/packages/mainline/ubuntu/ `lsb_release -cs` nginx&#x27; &gt; /etc/apt/sources.list.d/Nginx.list&quot;<br></code></pre></td></tr></table></figure><ul><li><strong>nginx更新</strong><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sudo</span> apt-get update        //全部升级<br><br>sudo apt-get install nginx        //升级nginx<br><br></code></pre></td></tr></table></figure></li></ul>          </div><h3 id="4-踩坑专区"><a href="#4-踩坑专区" class="headerlink" title="4.踩坑专区"></a>4.踩坑专区</h3><div class="note note-warning">            <ul><li><p><strong>修改 <code>/usr/share/nginx/html</code> 目录下的 <code>index.html</code> 不生效</strong></p><p> 在 <code>/etc/nginx/conf.d</code>  目录下新建一个 <span class="label label-info">你需要访问的网址</span>.conf  &#x2F;&#x2F; 例如 ： <a href="http://www.moxccc.com/">www.moxccc.com</a>  &#x3D;&gt; moxccc.conf 并进行如下配置</p> <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">443</span> ssl;<br>    <span class="hljs-attribute">server_name</span>  moxccc.com www.moxccc.com frp.moxccc.com; //这里写你需要访问网址的<span class="hljs-attribute">url</span> 有多个则用空格隔开<br><br>    charset utf-<span class="hljs-number">8</span>;<br><br>    <span class="hljs-comment">#如果是80端口则301转向到https</span><br>    <span class="hljs-attribute">if</span> (<span class="hljs-variable">$server_port</span> = <span class="hljs-number">80</span> ) &#123;<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://<span class="hljs-variable">$host</span><span class="hljs-variable">$request_uri</span>;<br>    &#125;<br><br>    <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">root</span>   html;<br>        <span class="hljs-attribute">index</span>  index.html index.htm;<br>    &#125;<br>    <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>    <span class="hljs-section">location</span> = /50x.html &#123;<br>        <span class="hljs-attribute">root</span>   html;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>          </div><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://blog.dreamogi.com/posts/lets-encrypt-linux/">Linux下使用Let’s Encrypt配置Nginx SSL证书</a></p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vue3+vite+ts 常见问题汇总</title>
    <link href="/2023/04/20/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <url>/2023/04/20/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>  为什么写这样一篇文章呢，说到底是被折磨的受不了了，每次创建项目，东西还没怎么写就这报错那报错，烦的一批。所以呢趁着有时间赶紧把这些问题都给它集中起来，以后遇到直接看就行了，不用东搜西搜浪费时间！</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="1-VsCode-写方法出现-event-gt"><a href="#1-VsCode-写方法出现-event-gt" class="headerlink" title="1. VsCode 写方法出现  @event=&gt;"></a>1. VsCode 写方法出现  <code>@event=&gt;</code></h3><p> 在 Vue 中的点击事件 @click 后会自动补全一段“ <code>$event =&gt;</code> ”，这是 VSCode 中setting.json未设置好的缘故</p><p> <img src="/../img/blogimg/4-20/4-20-1.png"><br><em><strong>解决方案</strong></em></p><blockquote><p>点击设置-扩展-Inlay Hints: Event Argument In Inline Handlers 把他的勾选取消即可</p></blockquote><h3 id="2-vue文件引入正确-却出现红色错误波浪线"><a href="#2-vue文件引入正确-却出现红色错误波浪线" class="headerlink" title="2. vue文件引入正确 却出现红色错误波浪线"></a>2. vue文件引入正确 却出现红色错误波浪线</h3><p>在 Vue 文件中，引入外部文件不管你正确不正确都会出现红色的波浪线，产生这个问题的原因是我们使用了ts语法，他只能识别.ts文件，并不能识别.vue文件，所以在引入组件的时候报错了</p><p><img src="/../img/blogimg/4-20/4-20-2.png"></p><p><em><strong>解决方案</strong></em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//在 vite-env.d.ts 添加如下代码</span><br><br>declare <span class="hljs-variable language_">module</span> <span class="hljs-string">&quot;*.vue&quot;</span> &#123;<br>    <span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">App</span>, defineComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">component</span>: <span class="hljs-title class_">ReturnType</span>&lt;<span class="hljs-keyword">typeof</span> defineComponent&gt; &amp; &#123;<br>        <span class="hljs-title function_">install</span>(<span class="hljs-attr">app</span>: <span class="hljs-title class_">App</span>): <span class="hljs-keyword">void</span>;<br>    &#125;;<br>    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> component;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-vue文件引入-“-store-“-出现红色波浪线"><a href="#2-vue文件引入-“-store-“-出现红色波浪线" class="headerlink" title="2. vue文件引入 “ @/store “ 出现红色波浪线"></a>2. vue文件引入 “ <code>@/store</code> “ 出现红色波浪线</h3><p>找不到模块“@&#x2F;…”或其相应的类型声明</p><p><em><strong>解决方案</strong></em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//在 tsconfig.json 中添加配置</span><br><span class="hljs-string">&quot;baseUrl&quot;</span>: <span class="hljs-string">&quot;./&quot;</span>,<span class="hljs-comment">// 解析非相对模块的基础地址，默认是当前目录</span><br>    <span class="hljs-string">&quot;paths&quot;</span>: &#123;<br>    <span class="hljs-comment">// 路径映射，相对于baseUrl</span><br>      <span class="hljs-string">&quot;@/*&quot;</span>:[<span class="hljs-string">&quot;src/*&quot;</span>]<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题汇总</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3 使用ArcoDesign</title>
    <link href="/2023/04/18/vue3-ArcoDesign/"/>
    <url>/2023/04/18/vue3-ArcoDesign/</url>
    
    <content type="html"><![CDATA[<!-- Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues). --><h2 id="关于-ArcoDesign"><a href="#关于-ArcoDesign" class="headerlink" title="关于 ArcoDesign"></a>关于 ArcoDesign</h2><p><a href="https://arco.design/vue/docs/start">ArcoDesign</a> 是基于字节跳动公司内部的 Byte Design 升级而来，在打磨了近 3 年之后，通过字节内部大量业务沉淀和验证在前两天由掘金举办的《稀土开发者大会2021》上开源了，这不仅仅是一款 UI 组件库，而是一个能力全面的企业级产品设计系统。</p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install --save-dev @arco-design/web-vue<br></code></pre></td></tr></table></figure><h3 id="在main-js内引入"><a href="#在main-js内引入" class="headerlink" title="在main.js内引入"></a>在main.js内引入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ArcoVue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@arco-design/web-vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>;<br><span class="hljs-comment">//完整引入css -不推荐</span><br><span class="hljs-comment">// import &#x27;@arco-design/web-vue/dist/arco.css&#x27;;</span><br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>);<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ArcoVue</span>); <span class="hljs-comment">//将acro挂载到vue上</span><br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="按需加载（模板）"><a href="#按需加载（模板）" class="headerlink" title="按需加载（模板）"></a>按需加载（模板）</h3><blockquote><p>安装所需插件      npm install -D unplugin-vue-components unplugin-auto-import</p></blockquote><p>安装完成，对 <strong>vite.config.ts</strong> 文件进行配置 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AutoImport</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;unplugin-auto-import/vite&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Components</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;unplugin-vue-components/vite&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ArcoResolver</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;unplugin-vue-components/resolvers&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">vue</span>(),<br>    <span class="hljs-title class_">AutoImport</span>(&#123;<br>      <span class="hljs-attr">resolvers</span>: [<span class="hljs-title class_">ArcoResolver</span>()],<br>    &#125;),<br>    <span class="hljs-title class_">Components</span>(&#123;<br>      <span class="hljs-attr">resolvers</span>: [<br>        <span class="hljs-title class_">ArcoResolver</span>(&#123;<br>          <span class="hljs-attr">sideEffect</span>: <span class="hljs-literal">true</span><br>        &#125;)<br>      ]<br>    &#125;)<br>  ]<br>&#125;);<br><br></code></pre></td></tr></table></figure><h3 id="按需加载（样式）"><a href="#按需加载（样式）" class="headerlink" title="按需加载（样式）"></a>按需加载（样式）</h3><blockquote><p>安装所需插件      npm install vite-plugin-style-import –save-dev</p></blockquote><p>安装完成，对 <strong>vite.config.ts</strong> 文件进行配置 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-vue&#x27;</span><br><br><br><span class="hljs-comment">// 自动导入vue中hook reactive ref等</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AutoImport</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;unplugin-auto-import/vite&quot;</span><br><span class="hljs-comment">//自动导入ui-组件 比如说ant-design-vue  element-plus等</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Components</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;unplugin-vue-components/vite&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ArcoResolver</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;unplugin-vue-components/resolvers&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; createStyleImportPlugin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite-plugin-style-import&#x27;</span><br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">vue</span>(),<br>    <span class="hljs-title class_">AutoImport</span>(&#123;<br>      <span class="hljs-comment">//安装两行后你会发现在组件中不用再导入ref，reactive等</span><br>      <span class="hljs-attr">imports</span>: [<span class="hljs-string">&#x27;vue&#x27;</span>, <span class="hljs-string">&#x27;vue-router&#x27;</span>],<br>      <span class="hljs-comment">//存放的位置</span><br>      <span class="hljs-attr">dts</span>: <span class="hljs-string">&quot;src/auto-import.d.ts&quot;</span>,<br>      <span class="hljs-attr">resolvers</span>: [<span class="hljs-title class_">ArcoResolver</span>()],<br>    &#125;),<br>    <span class="hljs-title class_">Components</span>(&#123;<br>      <span class="hljs-comment">// 引入组件的,包括自定义组件</span><br>      <span class="hljs-comment">// 存放的位置</span><br>      <span class="hljs-attr">dts</span>: <span class="hljs-string">&quot;src/components.d.ts&quot;</span>,<br>      <span class="hljs-attr">resolvers</span>: [<br>        <span class="hljs-title class_">ArcoResolver</span>(&#123;<br>          <span class="hljs-attr">sideEffect</span>: <span class="hljs-literal">true</span><br>        &#125;)<br>      ]<br>    &#125;),<br>    <span class="hljs-title function_">createStyleImportPlugin</span>(&#123;<br>      <span class="hljs-attr">libs</span>: [<br>        &#123;<br>          <span class="hljs-attr">libraryName</span>: <span class="hljs-string">&#x27;@arco-design/web-vue&#x27;</span>,<br>          <span class="hljs-attr">esModule</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">resolveStyle</span>: <span class="hljs-function">(<span class="hljs-params">name</span>) =&gt;</span> &#123;<br>            <span class="hljs-comment">// css</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">`@arco-design/web-vue/es/<span class="hljs-subst">$&#123;name&#125;</span>/style/css.js`</span><br>            <span class="hljs-comment">// less</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">`@arco-design/web-vue/es/<span class="hljs-subst">$&#123;name&#125;</span>/style/index.js`</span><br>          &#125;,<br>        &#125;<br>      ]<br>    &#125;)<br>  ],<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>若报 Cannot find module ‘consola’ 这个错误<br>可在控制台输入  npm i consola -D 安装对应插件即可</p></blockquote><p>完成以上步骤 就可以正常使用AcroDesign ui库了 </p><p>vue3+vite+ts+router+pinia+axios <a href="https://blog.csdn.net/weixin_59916662/article/details/127331094?spm=1001.2014.3001.5506">一把梭推荐文章</a></p>]]></content>
    
    
    <categories>
      
      <category>Vue3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
